@startuml
package Bot{

    interface BotADT{
        + move(iterator: Iterator): void
        + assignAlgorithm(AlgorithmType algorithm): void
        + hasFlag(): boolean
        + setFlag(flag: boolean): void
        + getAlgorithm(): AlgorithmType
        + getTeamType(): TeamType
        + setTeamType(teamType: TeamType): void
    }

    class Bot extends MoveInfo implements BotADT {
        - {static} nextid = 1: int
        - id: int
        - algorithm: AlgorithmType
        - teamType: TeamType
        - flag: boolean
        - enemyBase: Location
        - base: Location

        + Bot(algorithm: AlgorithmType, team: TeamType, enemyBase: Location, base: Location)
        + move(iterator: Iterator ): void
        + getAlgorithm(): AlgorithmType
        + getTeamType(): TeamType
        + setTeamType(teamType: TeamType ): void
        + hasFlag(): boolean
        + setFlag(): void
        + assignAlgorithm(algorithm: AlgorithmType ): void
        + getId(): int 
        + getEnemyBase(): Location
        + setEnemyBase(enemyBase: Location): void
        + getBase(): Location
        + setBase(base: Location): void
        + {static} resetId(): void
        + toString(): String  
    }

    interface MoveInfoADT{
        + getPrevious(): Location
        + getCurrent(): Location
        + setPrevious(previous: Location): void
        + setCurrent(current: Location): void
        + hasMoved(): boolean
        + setMoved(moved: boolean): void
        + hasNoPath(): boolean
        + setNoPath(noPath: boolean): void 
    }

    class MoveInfo implements MoveInfoADT {
        - previous: Location
        - current: Location
        - noPath: boolean
        - moved: boolean

        + MoveInfo(current: Location)
        + getPrevious(): Location
        + getCurrent(): Location
        + setPrevious(previous: Location): void
        + setCurrent(current: Location): void
        + hasMoved(): boolean
        + setMoved(moved: boolean): void
        + hasNoPath(): boolean
        + setNoPath(noPath boolean): void    
    }
}

package Enums{
    enum AlgorithmType {
        SHORTEST_PATH
        MST
        DFS
        DEFENSE
    }

    enum TeamType {
        RED 
        BLUE 
        DEFAULT 
        CONTESTED

        + {static} teamTypetoString(team: TeamType): String
    }
}

package Exceptions{
    class ElemenNotFoundException extends Exception{
        + ElementNotFoundException(message: String)
    }

    class EmptyCollectionException extends Exception{
        + EmptyCollectionException(emptyList: String)
    }

    class NonComparableElementException extends Exception{
        + NonComparableElementException(elementIsNotComparable: String)
    }
}

package Game{
    interface GameADT{
        + initialize(startingPlayer: String): void
        + start(startingPlayer: String): void
        + moveVisualizer(currentBot: Bot): void
        + addBot(bot: Bot): void
        + getMap(): Map 
        + getRedBots(): int
        + getBlueBots(): int      
        + getBots(): LinkedQueue<Bot>
    }

    class Game implements GameADT{
        - map: Map
        - mapVisualizer: MapVisualizer
        - redBots: int
        - blueBots: int
        - final flagRed: Location
        - final flagBlue: Location
        - bots: LinkedQueue<Bot>
        - {static} round = 1: int
        - gameOver: boolean

        + Game(map: Map, flag1: char, flag2: char, redBots: int, blueBots: int)
        + initialize(startingPlayer: String): void
        + start(startingPlayer: String): void
        - playRound(currentBot: Bot): Bot
        - gameOver(bot: Bot, startingPlayer: String): boolean
        - executeMove(currentBot: Bot): void
        - defend(bot: Bot): void
        - play(currentBot: Bot, start: Location, end: Location): void
        - canRecaptureFlag(currentBot: Bot): boolean
        + moveVisualizer(currentBot: Bot): void
        + addBot(bot: Bot): void
        + getMap(): Map 
        + getRedBots(): int
        + getBlueBots(): int      
        + getBots(): LinkedQueue<Bot>
    }
}

package Main{
    class MainMenus{
        + {static} main(args: String[]): void
    }
}

package Map{
    
    interface LocationADT{

    }
    
    
    class Location implements LocationADT{
        // A definição da classe Location não foi fornecida na pergunta. Assumindo que esta classe exista.
    }
}

package MapVisualizer{

}

package Menus{

}

Bot "1" --> "*" Location : has
 
@enduml